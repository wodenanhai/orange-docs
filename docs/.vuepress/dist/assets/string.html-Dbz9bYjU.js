import{_ as s,c as a,a as t,o as p}from"./app-C3iz9pW8.js";const e={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="_4-字符串相关" tabindex="-1"><a class="header-anchor" href="#_4-字符串相关"><span>4.字符串相关</span></a></h1><h2 id="_4-1-api相关" tabindex="-1"><a class="header-anchor" href="#_4-1-api相关"><span>4.1. API相关</span></a></h2><ul><li>字符串倒序 <ul><li>语法: reverseString(str)</li><li>功能: 生成一个倒序的字符串</li></ul></li><li>字符串是否是回文 <ul><li>语法: palindrome(str)</li><li>功能: 如果给定的字符串是回文，则返回 true ；否则返回 false</li></ul></li><li>截取字符串 <ul><li>语法: truncate(str, num)</li><li>功能: 如果字符串的长度超过了num, 截取前面num长度部分, 并以...结束</li></ul></li></ul><p>##4.2. 编码实现</p><ul><li><code>src/string/index.js</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">/* </span>
<span class="line">1. 字符串倒序: reverseString(str)  生成一个倒序的字符串</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// return str.split(&#39;&#39;).reverse().join(&#39;&#39;)</span></span>
<span class="line">    <span class="token comment">// return [...str].reverse().join(&#39;&#39;)</span></span>
<span class="line">    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* </span>
<span class="line">2. 字符串是否是回文: palindrome(str) 如果给定的字符串是回文，则返回 true ；否则返回 false</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> str <span class="token operator">===</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* </span>
<span class="line">3. 截取字符串: truncate(str, num) 如果字符串的长度超过了num, 截取前面num长度部分, 并以...结束</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">truncate</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> num <span class="token operator">?</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;...&#39;</span> <span class="token operator">:</span> str</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-3-测试" tabindex="-1"><a class="header-anchor" href="#_4-3-测试"><span>4.3.测试</span></a></h2><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>字符串处理的系列方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../dist/common-utils.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>CommonUtils<span class="token punctuation">.</span><span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// dcba</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>CommonUtils<span class="token punctuation">.</span><span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token string">&#39;abcb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CommonUtils<span class="token punctuation">.</span><span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token string">&#39;abcba&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false true</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>CommonUtils<span class="token punctuation">.</span><span class="token function">truncate</span><span class="token punctuation">(</span><span class="token string">&#39;boomerang&#39;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// boomera...</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)]))}const i=s(e,[["render",l],["__file","string.html.vue"]]),u=JSON.parse('{"path":"/tools/customize/string.html","title":"4.字符串相关","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"4.1. API相关","slug":"_4-1-api相关","link":"#_4-1-api相关","children":[]},{"level":2,"title":"4.3.测试","slug":"_4-3-测试","link":"#_4-3-测试","children":[]}],"git":{"updatedTime":1753943216000,"contributors":[{"name":"zhangcheng","email":"2778162192@qq.com","commits":1}]},"filePathRelative":"tools/customize/string.md"}');export{i as comp,u as data};
