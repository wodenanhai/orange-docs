import{_ as s,c as a,a as p,o as t}from"./app-DzOJCIeq.js";const l="/orange-docs/assets/img-JlvUP07x.png",e={};function c(i,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="_1、函数相关" tabindex="-1"><a class="header-anchor" href="#_1、函数相关"><span>1、函数相关</span></a></h1><h2 id="_1-1-call-apply-bind" tabindex="-1"><a class="header-anchor" href="#_1-1-call-apply-bind"><span>1.1.call()&amp; apply()&amp; bind()</span></a></h2><h3 id="_1-1-1api说明" tabindex="-1"><a class="header-anchor" href="#_1-1-1api说明"><span>1.1.1Api说明</span></a></h3><ul><li>call() <ul><li>语法: call(fn, obj, ...args)</li><li>功能: 执行fn, 使this为obj, 并将后面的n个参数传给fn(功能等同于函数对象的call方法)</li></ul></li><li>apply() <ul><li>语法: apply(fn, obj, args)</li><li>功能: 执行fn, 使this为obj, 并将args数组中的元素传给fn(功能等同于函数对象的apply方法)</li></ul></li><li>bind() <ul><li>语法: bind(fn, obj, ...args)</li><li>功能: 给fn绑定this为obj, 并指定参数为后面的n个参数 (功能等同于函数对象的bind方法)</li></ul></li></ul><h3 id="_1-1-2-实现说明" tabindex="-1"><a class="header-anchor" href="#_1-1-2-实现说明"><span>1.1.2.实现说明</span></a></h3><ul><li>区别call()/apply()/bind() <ul><li>call(obj)/apply(obj): 调用函数, 指定函数中的this为第一个参数的值</li><li>bind(obj): 返回一个新的函数, 新函数内部会调用原来的函数, 且this为bind()指定的第一参数的值</li><li>注意: 如果obj是null/undefined, this为window</li></ul></li><li>应用 <ul><li>call()/apply()应用: 根据伪数组生成真数组</li><li>bind(): react中组件的自定义方法 / vue中的事件回调函数内部</li></ul></li><li>自定义call()/apply() <ul><li>给obj添加一个临时方法, 方法名任意, 值为当前函数</li><li>通过obj调用这个临时方法, 并将接收的参数传入</li><li>删除obj上的这个临时方法属性</li></ul></li><li>自定义实现bind() <ul><li>返回一个新函数</li><li>在新函数内部通过原函数对象的call方法来执行原函数</li><li>指定原函数的this为obj</li><li>指定参数为bind调用的参数和后面新函数调用的参数</li></ul></li></ul><h3 id="_1-1-3-编码实现" tabindex="-1"><a class="header-anchor" href="#_1-1-3-编码实现"><span>1.1.3.编码实现</span></a></h3><ul><li>自定义函数对象的call方法: <code>src/function/call.js</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">/* </span>
<span class="line">自定义函数对象的call方法</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;call()&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 如果obj是undefined/null, this指定为window</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// return fn(...args)</span></span>
<span class="line">        obj <span class="token operator">=</span> window</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 给obj添加一个临时方法, 方法指向的函数就是fn</span></span>
<span class="line">    obj<span class="token punctuation">.</span>tempFn <span class="token operator">=</span> fn</span>
<span class="line">    <span class="token comment">// 通过obj来调用这个方法 ==&gt; 也就会执行fn函数 ==&gt; 此时fn中的this肯定为obj</span></span>
<span class="line">    <span class="token keyword">const</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">tempFn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 删除obj上的临时方法</span></span>
<span class="line">    <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>tempFn</span>
<span class="line">    <span class="token comment">// 返回fn执行的结果</span></span>
<span class="line">    <span class="token keyword">return</span> result</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义函数对象的apply方法: <code>src/function/apply.js</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">/* </span>
<span class="line">自定义函数对象的apply方法</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;apply()&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 如果obj是undefined/null, this指定为window</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// return fn(...args)</span></span>
<span class="line">        obj <span class="token operator">=</span> window</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 给obj添加一个临时方法, 方法指向的函数就是fn</span></span>
<span class="line">    obj<span class="token punctuation">.</span>tempFn <span class="token operator">=</span> fn</span>
<span class="line">    <span class="token comment">// 通过obj来调用这个方法 ==&gt; 也就会执行fn函数 ==&gt; 此时fn中的this肯定为obj</span></span>
<span class="line">    <span class="token keyword">const</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">tempFn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 删除obj上的临时方法</span></span>
<span class="line">    <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>tempFn</span>
<span class="line">    <span class="token comment">// 返回fn执行的结果</span></span>
<span class="line">    <span class="token keyword">return</span> result</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义函数对象的bind方法: <code>src/function/bind.js</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>call<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./call&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* </span>
<span class="line">  自定义函数对象的bind方法</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bind()&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 返回一个新函数</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 通过call调用原函数, 并指定this为obj, 实参为args与args2</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">call</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-4-测试" tabindex="-1"><a class="header-anchor" href="#_1-1-4-测试"><span>1.1.4.测试</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>函数的call/apply/bind()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../dist/common-utils.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">11</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> a <span class="token operator">+</span> b</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* 测试内置的函数对象的call方法 */</span></span>
<span class="line">    <span class="token comment">// console.log(f.call(obj, 1, 2, 3))</span></span>
<span class="line">    <span class="token comment">// console.log(f.call(undefined, 1, 2, 3))</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* 测试内置的函数对象的apply方法 */</span></span>
<span class="line">    <span class="token comment">// console.log(f.apply(obj, [4, 5, 6]))</span></span>
<span class="line">    <span class="token comment">// console.log(f.apply(undefined, [4, 5, 6]))</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* 测试内置的函数对象的bind方法 */</span></span>
<span class="line">    <span class="token comment">// const f2 = f.bind(obj)</span></span>
<span class="line">    <span class="token comment">// // console.log(f(1, 2)) // bind()并没有改变函数本身, 接收调用原函数是不会有任何变化的</span></span>
<span class="line">    <span class="token comment">// f2(3, 4) // 必须调用bind返回的新函数, 原函数中的this才是指定的obj</span></span>
<span class="line">    <span class="token comment">// console.log(f.bind(obj, 1)(3, 4))  // 1 3 22 obj   4</span></span>
<span class="line">    <span class="token comment">// console.log(f.bind(obj, 1, 2)(3, 4)) // 1 2, 22 obj  3    注意: 可以暂停视频, 先自己分析一下</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* ******************************************************** */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* 测试自定义call() */</span></span>
<span class="line">    <span class="token comment">// console.log(CommonUtils.call(f, obj, 1, 2, 3))</span></span>
<span class="line">    <span class="token comment">// console.log(CommonUtils.call(f, undefined, 1, 2, 3))</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* 测试自定义apply() */</span></span>
<span class="line">    <span class="token comment">// console.log(CommonUtils.apply(f, obj, [1, 2, 3]))</span></span>
<span class="line">    <span class="token comment">// console.log(CommonUtils.apply(f, undefined, [1, 2, 3]))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* 测试自定义bind() */</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">CommonUtils</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">CommonUtils</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">CommonUtils</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">CommonUtils</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-2-函数节流与函数防抖" tabindex="-1"><a class="header-anchor" href="#_1-2-函数节流与函数防抖"><span>1.2.函数节流与函数防抖</span></a></h2><h3 id="_1-2-1-相关理解" tabindex="-1"><a class="header-anchor" href="#_1-2-1-相关理解"><span>1.2.1.相关理解</span></a></h3><ul><li>事件频繁触发可能造成的问题? <ul><li>一些浏览器事件:window.onresize、window.mousemove等，触发的频率非常高，会造成界面卡顿</li><li>如果向后台发送请求，频繁触发，对服务器造成不必要的压力</li></ul></li><li>如何限制事件处理函数频繁调用 <ul><li>函数节流</li><li>函数防抖</li></ul></li><li>函数节流(throttle) <ul><li>理解: <ul><li>在函数需要频繁触发时: 函数执行一次后，只有大于设定的执行周期后才会执行第二次</li><li>适合多次事件按时间做平均分配触发</li></ul></li><li>场景： <ul><li>窗口调整（resize）</li><li>页面滚动（scroll）</li><li>DOM 元素的拖拽功能实现（mousemove）</li><li>抢购疯狂点击（click）</li></ul></li></ul></li><li>函数防抖(debounce) <ul><li>理解: <ul><li>在函数需要频繁触发时: 在规定时间内，只让最后一次生效，前面的不生效。</li><li>适合多次事件一次响应的情况</li></ul></li><li>场景: <ul><li>输入框实时搜索联想（keyup/input）</li></ul></li></ul></li><li>区别函数节流与防抖 <img src="`+l+`" alt="png"></li></ul><h3 id="_1-2-2-api说明" tabindex="-1"><a class="header-anchor" href="#_1-2-2-api说明"><span>1.2.2.API说明</span></a></h3><ul><li>throttle() 节流 <ul><li>语法: throttle(callback, wait)</li><li>功能: 创建一个节流函数，在 wait 毫秒内最多执行 callback 一次</li></ul></li><li>debounce() 防抖 <ul><li>语法: debounce(callback, wait)</li><li>功能: 创建一个防抖动函数，该函数会从上一次被调用后，延迟 wait 毫秒后调用 callback</li></ul></li></ul><h3 id="_1-2-3-编码实现" tabindex="-1"><a class="header-anchor" href="#_1-2-3-编码实现"><span>1.2.3.编码实现</span></a></h3><ul><li><code>src/function/throttle.js</code>:函数节流</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">/* </span>
<span class="line">实现函数节流</span>
<span class="line">- 语法: throttle(callback, wait)</span>
<span class="line">- 功能: 创建一个节流函数，在 wait 毫秒内最多执行 \`callback\` 一次</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">  <span class="token comment">// 返回一个事件监听函数(也就是节流函数)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;throttle event&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 只有当距离上次处理的时间间隔超过了wait时, 才执行处理事件的函数</span></span>
<span class="line">    <span class="token keyword">const</span> current <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span> current <span class="token operator">-</span> start <span class="token operator">&gt;</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token comment">// 需要指定this和参数</span></span>
<span class="line">      start <span class="token operator">=</span> current</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>src/function/debounce.js</code>:函数防抖</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">/* </span>
<span class="line">实现函数防抖</span>
<span class="line">- 语法: debounce(callback, wait)</span>
<span class="line">- 功能: 创建一个防抖动函数，该函数会从上一次被调用后，延迟 \`wait\` 毫秒后调用 \`callback\`</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">debounce</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 用来保存定时器任务的标识id</span></span>
<span class="line">  <span class="token keyword">let</span> timeoutId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> </span>
<span class="line">  <span class="token comment">// 返回一个事件监听函数(也就是防抖函数)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;debounce event&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 清除未执行的定时器任务</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeoutId<span class="token operator">!==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 启动延迟 await 时间后执行的定时器任务</span></span>
<span class="line">    timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 调用 callback 处理事件</span></span>
<span class="line">      <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 处理完后重置标识</span></span>
<span class="line">      timeoutId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-4-测试" tabindex="-1"><a class="header-anchor" href="#_1-2-4-测试"><span>1.2.4.测试</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>函数节流与防抖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>正常处理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>throttle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>测试函数节流<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>debounce<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>测试函数防抖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../dist/common-utils.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token comment">&lt;!-- &lt;script src=&quot;../node_modules/common-utils/dist/common-utils.js&quot;&gt;&lt;/script&gt; --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    <span class="token comment">/* 处理点击事件的回调函数 */</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 处理事件的回调</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;处理点击事件&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;handle&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> handleClick</span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;throttle&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> CommonUtils<span class="token punctuation">.</span><span class="token function">throttle</span><span class="token punctuation">(</span>handleClick<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;debounce&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> CommonUtils<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span>handleClick<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27)]))}const u=s(e,[["render",c]]),k=JSON.parse('{"path":"/tools/customize/function.html","title":"1、函数相关","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1754010799000,"contributors":[{"name":"zhangcheng","username":"zhangcheng","email":"2778162192@qq.com","commits":1,"url":"https://github.com/zhangcheng"}],"changelog":[{"hash":"17a91399e5215a1fcc42cf7a0aa74dc09027bf35","time":1754010799000,"email":"2778162192@qq.com","author":"zhangcheng","message":"commit"}]},"filePathRelative":"tools/customize/function.md"}');export{u as comp,k as data};
